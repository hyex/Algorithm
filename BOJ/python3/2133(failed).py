N = int(input())
dp = [0] * 31
dp[2] = 3

if N == 0:
    print("0")
else:
    for i in range(4, N+1, 2):
        dp[i] = 2 + dp[i-2] * 3 + sum(dp[:i-2]) * 2 # sum = i-4까지 모든 배열에 *2 한 값의 합

print(dp[N])


"""
3 * N 벽을 2 * 1 / 1 * 2 로 채우는 경우의 수

* N = 홀수, 0

dp = [3]

N = 2, 3 * 2
a. 가로가 2인 타일 묶음 경우의 수 = 3
3*2 = 3
3

N = 4, 3 * 4
b. 가로가 4인 타일 묶음 경우의 수 = 2
나눌 수 없는 3*4 = 2
3*2 * 3*2 = 3 * 3 = 9
11

N = 6, 3 * 6
c. 가로가 6인 타일 묶음 경우의 수 = 2
나눌 수 없는 3*6 = 2
나눌 수 없는 3*4 * 3*2 = 2 * 3 = 6
3*2 * 3*4 = 3 * 11 = 33 
41

N = 8, 3 * 8
d. 가로가 8인 타일 묶음 경우의 수 = 2
나눌 수 없는 3*8 = 2
나눌 수 없는 3*6 * 3*2 = 2 * 3 = 6 
나눌 수 없는 3*4 * 3*4 = 2 * 11 = 22
3*2 * 3*6 = 3*41 = 123
153

"""
